# -*-Makefile-*-
# This Makefile fragment is shared between fileutils, sh-utils, textutils,
# CPPI, Bison, and Autoconf.

## Copyright 2001 Free Software Foundation, Inc.
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2, or (at your option)
## any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
## 02111-1307, USA.

# Do not save the original name or timestamp in the .tar.gz file.
GZIP_ENV = '--no-name --best'

CVS = cvs

prev_version_file ?= .prev-version

THIS_VERSION_REGEXP = $(subst .,\.,$(VERSION))
PREV_VERSION := $(shell cat $(prev_version_file))
PREV_VERSION_REGEXP := $(shell echo $(PREV_VERSION)|sed 's/\./\\./g')

tag-package = $(shell echo "$(PACKAGE)" | tr '[:lower:]' '[:upper:]')
tag-this-version = $(subst .,_,$(VERSION))
tag-prev-version = $(subst .,_,$(PREV_VERSION))
this-cvs-tag = $(tag-package)-$(tag-this-version)
prev-cvs-tag = $(tag-package)-$(tag-prev-version)
my_distdir = $(PACKAGE)-$(VERSION)

# Old releases are stored here.
# Used for diffs and xdeltas.
release_archive_dir ?= ../release



## ---------------- ##
## Updating files.  ##
## ---------------- ##

WGET = wget
ftp-gnu = ftp://ftp.gnu.org/gnu

# Use mv, if you don't have/want move-if-change.
move_if_change ?= move-if-change

# ------------------- #
# Updating PO files.  #
# ------------------- #

po_repo = http://www.iro.umontreal.ca/contrib/po/maint/$(PACKAGE)
.PHONY: do-po-update po-update
do-po-update:
	tmppo=/tmp/$(PACKAGE)-$(VERSION)-po &&\
	rm -rf $$tmppo && \
	mkdir $$tmppo && \
	(cd $$tmppo && $(WGET) -r -l1 -nd --no-parent -A '*.po' $(po_repo)) &&\
	cp $$tmppo/*.po po
	cd po && $(MAKE) update-po
	$(MAKE) po-check

po-update:
	if test -d "po"; then \
	  $(MAKE) do-po-update; \
	fi

# -------------------------- #
# Updating GNU build tools.  #
# -------------------------- #

# The following pseudo table associates a local directory and a URL
# with each of the files that belongs to some other package and is
# regularly updated from the specified URL.
wget_files ?= $(srcdir)/config.guess $(srcdir)/config.sub \
              $(srcdir)/src/ansi2knr.c \
	      $(srcdir)/doc/texinfo.tex
wget-targets = $(patsubst %, get-%, $(wget_files))

config.guess-url_prefix = $(ftp-gnu)/config/
config.sub-url_prefix = $(ftp-gnu)/config/

ansi2knr.c-url_prefix = ftp://ftp.cs.wisc.edu/ghost/

texinfo.tex-url_prefix = $(ftp-gnu)/texinfo/

standards.texi-url_prefix = $(ftp-gnu)/GNUinfo/
make-stds.texi-url_prefix = $(ftp-gnu)/GNUinfo/

target = $(patsubst get-%, %, $@)
url = $($(notdir $(target))-url_prefix)$(notdir $(target))

.PHONY: $(wget-targets)
$(wget-targets):
	$(WGET) $(url) -O $(target).t \
	  && $(move_if_change) $(target).t $(target)

.PHONY: wget-update
wget-update: $(wget-targets)


# Updating tools via CVS.
cvs_files ?= depcomp missing
cvs-targets = $(patsubst %, get-%, $(cvs_files))

automake_repo = :pserver:anoncvs@anoncvs.cygnus.com:/cvs/automake
.PHONY: $(cvs-targets)
$(cvs-targets):
	$(CVS) -d $(automake_repo) co -p automake/lib/$(notdir $(target)) \
	  >$(target).t \
	    && $(move_if_change) $(target).t $(target);

.PHONY: cvs-update
cvs-update: $(cvs-targets)


# --------------------- #
# Updating everything.  #
# --------------------- #

.PHONY: update
update: wget-update cvs-update po-update



## --------------- ##
## Sanity checks.  ##
## --------------- ##

# Checks that don't require cvs.  Run `changelog-check' last as
# previous test may reveal problems requiring new ChangeLog entries.
local-check: po-check copyright-check writable-files changelog-check

changelog-check:
	if head ChangeLog | grep 'Version $(VERSION)' >/dev/null; then \
	  :; \
	else \
	  echo "$(VERSION) not in ChangeLog" 1>&2; \
	  exit 1; \
	fi

# Verify that all source files using _() are listed in po/POTFILES.in.
po-check:
	if test -f po/POTFILES.in; then \
	  grep -E -v '^(#|$$)' po/POTFILES.in | sort > $@-1; \
	  grep -E -l '\b_\(' lib/*.c src/*.c | sort > $@-2; \
	  diff -u $@-1 $@-2 || exit 1; \
	  rm -f $@-1 $@-2; \
	fi

# Check that `make alpha' will not fail at the end of the process.
writable-files:
	if test -d $(release_archive_dir); then :; else			\
	  mkdir $(release_archive_dir);					\
	fi
	for file in $(distdir).tar.gz $(xd-delta)			\
	            $(release_archive_dir)/$(distdir).tar.gz		\
	            $(release_archive_dir)/$(xd-delta); do		\
	  test -e $$file || continue;					\
	  test -w $$file						\
	    || { echo ERROR: $$file is not writable; fail=1; };		\
	done;								\
	test "$$fail" && exit 1 || :

# Make sure that the copyright date in lib/version-etc.c is up to date.
copyright-check:
	@if test -f lib/version-etc.c; then \
	  grep 'N_("Copyright (C) $(shell date +%Y) Free' lib/version-etc.c \
	    >/dev/null \
	  || { echo 'out of date copyright in $<; update it' 1>&2; exit 1; }; \
	fi


# Sanity checks with the CVS repository.
cvs-tag-check:
	echo $(this-cvs-tag); \
	if $(CVS) -n log -h README | grep -e $(this-cvs-tag): >/dev/null; then \
	  echo "$(this-cvs-tag) as already been used; not tagging" 1>&2; \
	  exit 1; \
	else :; fi

cvs-diff-check:
	if $(CVS) diff >cvs-diffs; then			  	\
	  rm cvs-diffs;					  	\
	else						  	\
	  echo "Some files are locally modified:" 1>&2;  	\
	  cat cvs-diffs;					\
	  exit 1;						\
	fi

cvs-check: cvs-diff-check cvs-tag-check

maintainer-distcheck: changelog-check
	$(MAKE) distcheck
	$(MAKE) my-distcheck



## -------------- ##
## Making dists.  ##
## -------------- ##


# Tag before making distribution.  Also, don't make a distribution if
# checks fail.  Also, make sure the NEWS file is up-to-date.
# FIXME: use dist-hook/my-dist like distcheck-hook/my-distcheck.
cvs-dist: local-check cvs-check maintainer-distcheck
	$(CVS) update po
	$(CVS) tag -c $(this-cvs-tag)
	$(MAKE) dist

# Use this to make sure we don't run these programs when building
# from a virgin tgz file, below.
null_AM_MAKEFLAGS = \
  ACLOCAL=false \
  AUTOCONF=false \
  AUTOM4TE=false \
  AUTOMAKE=false \
  AUTOHEADER=false \
  MAKEINFO=false

# Detect format-string/arg-list mismatches that would normally be obscured
# by the use of _().  The --disable-nls effectively defines away that macro,
# and building with CFLAGS='-Wformat -Werror' causes any format warning to be
# treated as a failure.
t=./=test
my-distcheck: writable-files po-check
	-rm -rf $(t)
	mkdir $(t)
	GZIP=$(GZIP_ENV) $(AMTAR) -C $(t) -zxf $(distdir).tar.gz
	cd $(t)/$(distdir) \
	  && ./configure --disable-nls \
	  && $(MAKE) CFLAGS='-Wformat -Werror' \
	      AM_MAKEFLAGS='$(null_AM_MAKEFLAGS)' \
	  && $(MAKE) dvi \
	  && $(MAKE) check \
	  && $(MAKE) distclean
	cd $(t) && mv $(distdir) $(distdir).old \
	  && $(AMTAR) -zxf ../$(distdir).tar.gz
	diff -ur $(t)/$(distdir).old $(t)/$(distdir)
	-rm -rf $(t)
	@echo "========================"; \
	echo "$(distdir).tar.gz is ready for distribution"; \
	echo "========================"

# This must be the same name on both hosts.
# Make it a symlink that points to the right place.
real_dir = fetish-ftp

url_dir_list = $(foreach x,$(hosts),ftp://$($(x)_host)/$($(x)_url_dir))

tgz-md5 = $(shell md5sum < $(my_distdir).tar.gz|sed 's/  -//')
tgz-sha1 = $(shell sha1sum < $(my_distdir).tar.gz|sed 's/  -//')
bz2-md5 = $(shell md5sum < $(my_distdir).tar.bz2|sed 's/  -//')
bz2-sha1 = $(shell sha1sum < $(my_distdir).tar.bz2|sed 's/  -//')
tgz-size = $(shell du --human $(my_distdir).tar.gz|sed 's/\([Mk]\).*/ \1B/')
bz2-size = $(shell du --human $(my_distdir).tar.bz2|sed 's/\([Mk]\).*/ \1B/')
xd-size = $(shell du --human $(xd-delta)|sed 's/\([Mk]\).*/ \1B/')

rel-check:
	tarz=/tmp/rel-check-tarz-$$$$; \
	md5_tmp=/tmp/rel-check-md5-$$$$; \
	set -e; \
	trap 'status=$$?; rm -f $$tarz $$md5_tmp; exit $$status' 0 1 2 3 15; \
	$(WGET) -q --output-document=$$tarz $(url); \
	echo "$(md5)  -" > $$md5_tmp; \
	md5sum -c $$md5_tmp < $$tarz

prev-tgz = $(PACKAGE)-$(PREV_VERSION).tar.gz
xd-delta = $(PACKAGE)-$(PREV_VERSION)-$(VERSION).xdelta

GZIP = gzip
BZIP2 = bzip2
$(my_distdir).tar.bz2: $(my_distdir).tar.gz
	$(GZIP) -dc $< > $(my_distdir).tar
	rm -f $@
	$(BZIP2) -9 $(my_distdir).tar

rel-files = $(xd-delta) $(distdir).tar.bz2 $(distdir).tar.gz
announcement: NEWS ChangeLog $(rel-files)
	@( \
	  echo Subject: $(my_distdir) released; \
	  echo; \
	  echo FIXME: put comments here; \
	  echo; \
	  for url in $(url_dir_list); do \
	    echo "  $$url/$(my_distdir).tar.gz   ($(tgz-size))"; \
	    echo "  $$url/$(my_distdir).tar.bz2  ($(bz2-size))"; \
	  done; \
	  echo; \
	  echo And here are xdelta-style diffs; \
	  echo; \
	  for url in $(url_dir_list); do \
	    echo "  $$url/$(xd-delta)   ($(xd-size))"; \
	  done; \
	  echo; \
	  echo "Here are the MD5 and SHA1 signatures for the compressed tar files:"; \
	  echo; \
	  echo "$(tgz-md5)  $(my_distdir).tar.gz"; \
	  echo "$(bz2-md5)  $(my_distdir).tar.bz2"; \
	  echo "$(tgz-sha1)  $(my_distdir).tar.gz"; \
	  echo "$(bz2-sha1)  $(my_distdir).tar.bz2"; \
	  echo; \
	  echo NEWS:; \
	  sed -n "/$(THIS_VERSION_REGEXP)[]:]/,/$(PREV_VERSION_REGEXP)[]:]/p" NEWS \
	    | grep -v '^\['; \
	  echo; \
	  echo ChangeLog entries:; \
	  find . -name ChangeLog -maxdepth 2 \
	    | xargs $(CVS) diff -up -r$(prev-cvs-tag) -rHEAD \
	    | sed -n 's/^+//p' \
	    | perl -ne 'm!^\+\+ (\./)?! or print,next;' \
	      -e 'print "\n"."*"x70 ."\n"; s///; print; print "*"x70 ."\n"'; \
	)

define emit-rsync-commands
	echo =====================================
	echo =====================================
	echo 'for host in $(a_host) $(b_host); do \'
	echo '  rsync -e ssh --pro -av $(xd-delta) $(my_distdir).tar.bz2 \'
	echo '    $(my_distdir).tar.gz $$host:$(real_dir); done'
	echo '# send the /tmp/announcement e-mail'
	echo =====================================
	echo =====================================
endef

$(xd-delta): $(release_archive_dir)/$(prev-tgz) $(distdir).tar.gz
	xdelta delta -9 $^ $@ || :

alpha:
	$(MAKE) cvs-dist
	$(MAKE) $(xd-delta)
	$(MAKE) -s announcement > /tmp/announce-$(my_distdir)
	ln $(rel-files) $(release_archive_dir)
	chmod a-w $(rel-files)
	echo $(VERSION) > $(prev_version_file)
	$(CVS) ci -m. $(prev_version_file)
	@$(emit-rsync-commands)
